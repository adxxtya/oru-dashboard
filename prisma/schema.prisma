// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Account {
//     id                String  @id @default(cuid()) @map("_id")
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?
//     access_token      String?
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String          @id @default(cuid()) @map("_id")
    name                String?
    email               String?         @unique
    emailVerified       DateTime?
    image               String?
    phone               String?
    about               String?
    professionalDetails String?
    skills              String[]
    connections         String[]
    experience          Experience[]
    education           Education[]
    certifications      Certification[]
    imageUrl            String?
    // accounts            Account[]
    sessions            Session[]
}

model Education {
    id          String @id @default(cuid()) @map("_id")
    institute   String
    course      String
    description String
    user        User   @relation(fields: [userId], references: [id])
    userId      String
}

model Experience {
    id             String  @id @default(cuid()) @map("_id")
    company        String?
    position       String?
    employmentType String?
    duration       String?
    user           User?   @relation(fields: [userId], references: [id])
    userId         String?
}

model Certification {
    id     String @id @default(cuid()) @map("_id")
    course String
    source String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model VerificationToken {
    id         String   @id @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
